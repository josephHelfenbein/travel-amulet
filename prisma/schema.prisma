generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

// TiDB is highly compatible with the MySQL 5.7 protocol and the common features 
// and syntax of MySQL 5.7.
//
// TiDB currently does not support foreign key constraints. If you need to use the feature of 
// referential integrity, you can use the application layer implementation of prisma.
//
// Refercene: https://www.prisma.io/docs/concepts/components/prisma-schema/relations/referential-integrity#handling-the-referential-integrity-in-prisma
// Related Issue [WIP]: https://github.com/pingcap/tidb/issues/18209
// 
// More descriptions about MySQL compatibility:
// Refercene: https://docs.pingcap.com/tidb/dev/mysql-compatibility

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// 
// https://www.prisma.io/docs/concepts/components/prisma-schema/data-model

model Session {
  id           String   @id @default(cuid())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id       Int   @id @default(autoincrement())
  email    String   @db.VarChar(255) @unique
  password  String  @db.VarChar(255)
  name    String    @db.VarChar(255)
  country   String  @db.VarChar(2)
  preferences String @db.VarChar(255)
  results String @db.VarChar(255)
  image   String? @db.VarChar(255)
  sessions Session[]
  accounts Account[]

	@@map("users")
}

model Account {
  id  Int  @id @default(autoincrement())
  type  String
  provider  String
  providerAccountId String
  token_type        String?
  refresh_token     String?
  access_token      String? 
  id_token          String?
  scope             String?
  session_state     String?
  expires_at        Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique([provider, providerAccountId])
  @@map("account")
}

model CountryData {
  id  String  @id @db.VarChar(2)
  description   Bytes
  climate   Bytes
  currency    Bytes
  cuisine   Bytes
  language    Bytes
  culture   Bytes
  politics    Bytes
  @@map("countrydata")
}

// Because special characters cannot be used in the schema definition of the data model.
// We use `_nbsp_` to represent one space and use `_amp_` to represent `&`.
